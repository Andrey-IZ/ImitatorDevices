%YAML 1.1
---
# ****** Socket Settings: ****************
SocketSettings:
  port: 50007
  host: localhost
  socket_type: tcp   # choice - [tcp - for stream socket using, udp - for datagram socket using]
  timeout: 0         # timeout for everything recieved messages (seconds)
  delay_response: 0  # (ms), 0 - its does not delay (by default)
#
## ****** Serial Port Settings: **************
#SerialSettings:
#  port_name: COM2
#  databits: 8        # (5, 6, 7, 8)
#  baud_rate: 19200
#  parity: none       # choce - [even - even parity, none - no parity, odd - odd parity]
#  stop_bits: 2       # (1, 1.5, 2)
#  timeout: 0         # timeout for everything recieved messages (seconds)
#  delay_response: 0  # (sec), 0 - its does not delay (by default)
#
# **************** Examples: ********************
# doc: <Name of commands>
# response:
#    code: { value: 8, type: quint16 }
#    data: { value: 1, type: quint8 }
# emit_send:
#   trigger:
#     - on_connection   # send packet by connection client (!WARNING: Only for TCP)
#     - on_timeout      # send packet by timeout timer client
#   timeout: 1.5  # sec (default: 1)
# handler_response:
#   module_name: handlers_pchv3
#   function_name: handler_pchv3_basic_response
#  ---------------------------------------------------------------------
# doc: <Name of commands>
# request:
# - a1 a2 a3 a4 a5 a2 a7 a8 55 b0 b1
# - a1 a2 a3 dd a5 a6 a7 a8 a9 b0 b1
# response:
# - a1 a2 a3 aa a5 a6 a7 a8 a9 b0 b1
# - a1 a3 a4 a5 a6 a7 66 a9 b0 b1
# order: semiduplex  #  generator   - using one function for generating array of bytes for response to PC (required: handler_response)
#                    #  semiduplex - packet of request, than answer one]
#                    #  zip - orderly sending packets on response of request (by default)]
# delay_response: 0  # (ms), 0 - its does not delay (by default)
# ----------------------------------------------------------------------
# doc:         Setup, Reset, Test UKCU
# < request: <PARAMETERS for function: handler_request> > # it is not required parameters
# < response: <PARAMETERS for function: handler_response> >  # it will be parameter for function-generator of response
# order: generator
# handler_request:              # defined handler into specify modules
#   module_name: handlers_ukcu
#   function_name:
#     - handler_request_setup_ukcu
#     - handler_request_reset_ukcu
#     - handler_request_test_ukcu
# handler_response:             # defined handler into specify modules
#   module_name: handlers_ukcu
#   function_name: handler_ukcu_response    # using <request> parameteres
#
# **************** Protocols Settings: *****************
--- #---------------------------------------
doc: Check 12v
response: # 0003 0008 01
   code: { value: 8, type: quint16 }
   data: { value: 1, type: quint8 }
emit_send:
  trigger:
    - on_connection   # send packet by connection client (!WARNING Only for TCP)
#    - on_timeout      # send packet by timeout timer client
  timeout: 1.5  # sec (default: 1)
handler_response:
  module_name: handlers_pchv3
  function_name: handler_pchv3_unversal
--- #---------------------------------------
doc: power on 5,7 V2
request:  # 00 04 00 07 01 01
   code: { value: 7, type: quint16 }  # qt types - integer, float, double
   data:
    - { value: 1, type: quint8 }     #
    - { value: 1, type: quint8 }
response:  # 00 04 00 07 01 01
   code: { value: 7, type: quint16 }  # qt types - integer, float, double
   data:
    - { value: 1, type: quint8 }     #
    - { value: 1, type: quint8 }
handler_response:
  module_name: handlers_pchv3
  function_name: handler_pchv3_unversal
handler_request:
  module_name: handlers_pchv3
  function_name: handler_pchv3_unversal
--- #---------------------------------------
doc: power off 5,7 V2
request:   00 04  00 07  01  00
response:  00 04  00 07  01  00
--- #---------------------------------------
doc: power on 5,7 V1
request:   0004 0007 00 01
response:  0004 0007 00 01
--- #---------------------------------------
doc: power off 5,7 V1
request:   '0004_0007_00_00'
response:  0004 0007 00 00
