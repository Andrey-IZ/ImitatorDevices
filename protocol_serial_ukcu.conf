%YAML 1.1
---
# ****** Socket Settings: ****************
#SocketSettings:
#  port: 50007
#  host: localhost
#  socket_type: tcp   # choice - [tcp - for stream socket using, udp - for datagram socket using]
#  timeout: 0         # timeout for everything recieved messages (seconds)
#  delay_response: 0  # (ms), 0 - its does not delay (by default)
#
# ****** Serial Port Settings: **************
SerialSettings:
  port_name: COM2
  databits: 8        # (5, 6, 7, 8)
  baud_rate: 19200
  parity: none       # choce - [even - even parity, none - no parity, odd - odd parity]
  stop_bits: 2       # (1, 1.5, 2)
  timeout: 0         # timeout for everything recieved messages (seconds)

#delay_response: 1  # (sec), 0 - its does not delay (by default)

# **************** Protocols Settings: *****************
---
doc:         Setup, Reset, Test UKCU
#request:
#response:
order: generator
handler_request:
  module_name: handlers_ukcu
  function_name:
    - handler_request_setup_ukcu
    - handler_request_reset_ukcu
    - handler_request_test_ukcu
handler_response:
  module_name: handlers_ukcu
  function_name: handler_ukcu_response
#delay_response: 1.4  # (sec), 0 - its does not delay (by default)
---
doc: sTest asdsadasd 6v power
request: 0x0005
response:
order: generator
handler_response:
  module_name: handlers_ukcu
  function_name: handler_ukcu_response
handler_request:
  module_name: handlers_ukcu
  function_name: handler_request_write_read_low
---
doc: power on 5,7 V2
request:  00 04 00 07 01 01
response:  00 04 00 07 01 01
---
doc: power off 5,7 V2
request:  00 04 00 07 01 00
response:  00 04 00 07 01 00


# **************** Examples: ********************
# --- #------------------------------------------------------------------
# handler_parser:                           # if use command "full-generator" for parsing packet
#  module_name: handlers_snn_gui
#  function_name: handler_parser_snn_gui
# --- #------------------------------------------------------------------
# doc: <Name of commands>
# response:
#    code: { value: 8, type: quint16 }
#    data: { value: 1, type: quint8 }
# emit_send:
#   trigger:
#     - on_connection   # send packet by connection client (!WARNING: Only for TCP)
#     - on_timeout      # send packet by timeout timer client
#   timeout: 1.5  # sec (default: 1)
# handler_response:
#   module_name: handlers_pchv3
#   function_name: handler_pchv3_basic_response
# --- #------------------------------------------------------------------
# doc: <Name of commands>
# request:
# - a1 a2 a3 a4 a5 a2 a7 a8 55 b0 b1
# - a1 a2 a3 dd a5 a6 a7 a8 a9 b0 b1
# response:
# - a1 a2 a3 aa a5 a6 a7 a8 a9 b0 b1
# - a1 a3 a4 a5 a6 a7 66 a9 b0 b1
# order: semiduplex  #  generator   - using one function for generating array of bytes for response to PC (required: handler_response)
#                    #  full-generator -using one function for generating array of bytes  for response and request parsing to PC (required: handler_response, handler_parser)
#                    #  semiduplex - packet of request, than answer one]
#                    #  zip - orderly sending packets on response of request (by default)]
# delay_response: 0  # (ms), 0 - its does not delay (by default)
# --- #------------------------------------------------------------------
# doc:         Setup, Reset, Test UKCU
# < request: <PARAMETERS for function: handler_request> > # it is not required parameters
# < response: <PARAMETERS for function: handler_response> >  # it will be parameter for function-generator of response
# order: generator
# handler_request:              # defined handler into specify modules
#   module_name: handlers_ukcu
#   function_name:
#     - handler_request_setup_ukcu
#     - handler_request_reset_ukcu
#     - handler_request_test_ukcu
# handler_response:             # defined handler into specify modules
#   module_name: handlers_ukcu
#   function_name: handler_ukcu_response    # using <request> parameteres
# --- #---------------------------------------
# doc:    Вращение
# request: 0b00011
# order: full-generator
# handler_response:                                          # defined handler into specify modules
#  module_name: handlers_snn_gui
#  function_name: handler_response_snn_gui_req_turn_omega    # using <request> parameteres
#